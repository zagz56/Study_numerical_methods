# -*- coding: utf-8 -*-
"""КФУС.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K821m4ERO3-kjddgI3uVnFWTbeEKzfi_
"""

import math
import random
# Данные
energy = 0.5 # MeV
thickness = 10 # см
mfp = 0.2 # см
discrimination_energy = 0.05 # MeV
scattering_angles = [0, 45, 90, 135, 180]
scattering_probabilities = [0.2, 0.2, 0.2, 0.2, 0.2]
# Функция для расчета вероятности рассеяния фотона на угол theta
def scattering_probability(theta):
    index = scattering_angles.index(theta)
    return scattering_probabilities
def scattering_probability(theta):
    index = scattering_angles.index(round(theta / 45) * 45)
    return scattering_probabilities[index]
# Функция для расчета вероятности прохождения фотона через пластину без рассеяния
def transmission_probability(energy, thickness, mfp):
    x = thickness / mfp
    return math.exp(-x)
# Функция для расчета энергии фотона после рассеяния на угол theta
def scattered_energy(energy, theta):
    return energy / (1 + (energy/0.511)*(1-math.cos(math.radians(theta))))
# Функция для расчета количества фотонов, прошедших через пластину
def transmitted_photons(energy, thickness, mfp, discrimination_energy):
    transmitted = 0
    photons = 1000
    transmitted_prob = transmission_probability(energy, thickness, mfp)
    for i in range(photons):
        if energy > discrimination_energy:
            theta = scattering_angles[math.floor(len(scattering_angles)*scattering_probability(0.5))]
            energy = scattered_energy(energy, theta)
        else:
            transmitted += 1
            continue
        if energy <= discrimination_energy:
            continue
        if random.random() < transmitted_prob:
            transmitted += 1
    return transmitted / photons
# Функция для расчета доли фотонов, оставшихся в пластине
def photons_remaining(energy, thickness, mfp, discrimination_energy):
    return 1 - transmitted_photons(energy, thickness, mfp, discrimination_energy)
# Результаты
print("Доля фотонов, оставшихся в пластине: {:.4f}".format(photons_remaining(energy, thickness, mfp, discrimination_energy)))
print("Количество фотонов, прошедших через пластину: {:.1f}".format(transmitted_photons(energy, thickness, mfp, discrimination_energy) * 1000))